version: '3.8'

x-airflow-common:
  &airflow-common
  # Temporarily use official image for testing
  image: apache/airflow:2.9.3-python3.11
  # build:
  #   context: .
  #   dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgre:amine070193@postgres:5432/transactions_db
    AIRFLOW__CELERY__RESULT_BACKEND: redis://redis:6379/0
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    # Explicitly disable any AMQP/RabbitMQ settings
    AIRFLOW__CELERY__BROKER_TRANSPORT_OPTIONS: '{"master_name": "mymaster"}'
    AIRFLOW__CELERY__RESULT_BACKEND_DB: 0
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-}
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # Database environment variables for ETL scripts
    DB_NAME: ${DB_NAME:-transactions_db}
    DB_USER: ${DB_USER:-postgre}
    DB_PASSWORD: ${DB_PASSWORD:-amine070193}
    DB_HOST: ${DB_HOST:-postgres}
    DB_PORT: ${DB_PORT:-5432}
    API_KEY: ${API_KEY:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/etl:/opt/airflow/etl
    - ${AIRFLOW_PROJ_DIR:-.}/.env:/opt/airflow/.env
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:12.6
    restart: always
    environment:
      POSTGRES_DB: transactions_db
      POSTGRES_USER: postgre
      POSTGRES_PASSWORD: amine070193
    ports:
      - "5433:5432"  # Changed from 5432:5432 to 5433:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgre", "-d", "transactions_db"]
      interval: 10s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7.2-bookworm
    restart: always
    ports:
      - "6379:6379"
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s

  airflow-webserver:
    <<: *airflow-common
    command: ["airflow", "webserver"]
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: ["airflow", "scheduler"]
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: ["airflow", "celery", "worker"]
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: ["airflow", "triggerer"]
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        echo "Starting Airflow initialization..."
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/etl
        chown -R "$${AIRFLOW_UID:-50000}:0" /sources/{logs,dags,plugins,etl} || true
        chmod -R 755 /sources/{logs,dags,plugins,etl} || true
        airflow db init
        airflow users create \
          --username "$${_AIRFLOW_WWW_USER_USERNAME:-airflow}" \
          --firstname "Admin" \
          --lastname "User" \
          --role "Admin" \
          --email "admin@example.com" \
          --password "$${_AIRFLOW_WWW_USER_PASSWORD:-airflow}" 2>/dev/null || echo "User already exists"
        echo "Airflow initialization completed successfully!"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    restart: "no"

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    command: ["airflow", "celery", "flower"]
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres_data: